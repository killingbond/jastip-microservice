entity Trip{
	postingDate Instant, /*generated by system*/
    ownerId Long required, 
	timezone String required,
    originCountryId Long required,
    originCountryName String required, 
    originCityId Long, 
    originCityName String,
    destCountryId Long required,
    destCountryName String required,
    destCityId Long,
    destCityName String,
    startDate Instant required,
    endDate Instant required, 
    postCount Integer min(0), 
    status TripStatus
}

entity Posting{
	type PostingType, 
    status PostingStatus,
    ownerId Long required, 
    postingDate Instant, /*generated by system*/
	timezone String required,
    expiredDate Instant required,
    productName String required, 
    brand String,
    postingItemImg ImageBlob,
    postingItemImgUrl String,
    postingItemImgThumbUrl String,
    description String required, 
    quantity Integer required min(1),
    avaiableQuantity Integer min(0),
    referenceLink String,  
    itemCategoryId Long required, 
    itemCategoryName String required, 
    itemSubCategoryId Long required,
    itemSubCategoryName String required,
    additionalInfo String, 
    referencePlace String, 
    countryBuyFromId Long required, 
    countryBuyFromName String required,
    cityBuyFromId Long, 
    cityBuyFromName String, 
    countrySentToId Long required, 
    countrySentToName String required, 
    citySentToId Long, 
    citySentToName String,
    fragile Boolean, 
    needCooler Boolean, 
    otherNote Boolean,
    otherNoteInfo String, /*required of otherNote is true*/
    itemWeight Integer min(0), 
    packageSizeId Long,
    packageSizeName String,
    needReceipt Boolean,
    priceItem Double required min(0),
    serviceFee Double required min(0), 
    jastipFee Double required min(0), 
    totalFee Double required min(0),
    acceptedOfferingId Long,
    shoppingDate Instant, 
    deliveryDate Instant, 
}

entity Offering{
	actorId Long required, 
    actorType ActorType,
    status OfferingStatus,
    returnDate Instant required, 
    sentDate Instant, 
    sentFromCountryId Long required,
    sentFromCountryName String required,
    sentFromCityId Long required, 
    sentFromCityName String required, 
    offeringDate Instant, /*generated by system*/
	timezone String required,
    offeringExpiredDate Instant, 
    quantity Integer  min(1), 
	priceItem Double  min(0), 
    serviceFee Double  min(0), 
    jastipFee Double  min(0), 
    totalFee Double  min(0), 
    tripId Long, 
    tripCityName String , 
    tripCountryName String, 
    tripStartDate Instant, 
    tripEndDate Instant, 
    actorCityFromName String,
    shoppingDate Instant, 
    deliveryDate Instant, 
    notes String
}

entity OfferingDeliveryInfo{
	recipientName String required,
    phoneNumber String,
    deliveryAddress String required
}

entity OfferingDeliveryService{
	sentToCountryId Long required,
    sentToCountryName String required,
    sentToCityId Long required, 
    sentToCityName String required,
    packageSizeId Long, 
    packageSizeName String, 
    deliveryServiceId Long,
    deliveryServiceName String, 
    deliveryFee Double min(0)
}

entity OfferingPayment{
	finalPriceItem Double min(0), 
    finalServiceFee Double min(0), 
    finalJastipFee Double min(0),
    uniqueIdentifier Double min(0), 
    finalTotalFee Integer min(0), 
    paymentMethod PaymentMethod, 
    paymentConfirmDateTime Instant
}

entity OfferingPuchase{
	purchased Boolean, 
    receiptImg ImageBlob, 
    receiptImgUrl String, 
    receiptImgThumbUrl String
}

entity OfferingCourier{
	courierReceiptNo String required, 
    courierReceiptImg ImageBlob,
    courierReceiptImgUrl String,
    courierReceiptImgThumbUrl String,
    courierSendDate Instant, 
    courierDeliveryDay Integer min(0),
    courierEstDeliveredDate Instant, 
    confirmReceivedDateTime Instant
}

entity Comment{
	profileId Long required, 
    comment String required, 
    commentDateTime Instant 
}

entity SubComment{
	profileId Long required, 
    subComment String required, 
    subCommentDateTime Instant
}

entity TransactionAuditConfig{
	entityName String required, 
    activeStatus Boolean
}

entity TransactionAudit{
	entityName String required, 
    entityId Long
}

enum TripStatus {
	UPCOMING, ONGOING, PAST, CANCELED
}

enum PostingType{
	TRAVELLER, REQUESTOR
}

enum PostingStatus{
	OPEN, OFFERED, CLOSE, CANCELED, EXPIRED
}

enum ActorType{
	BUYER, SELLER
}

enum OfferingStatus{
	NEW, ACCEPTED, REJECTED, PAID, CANCELED
}

enum PaymentMethod{
	WALLET, BANK_TRANSFER
}

relationship OneToMany{
	Trip{posting} to Posting,
    Posting{offering} to Offering,
    Posting{comment} to Comment,
    Comment{subComment} to SubComment
}

relationship OneToOne{
	Offering{offeringDeliveryInfo} to OfferingDeliveryInfo {offering}, 
    Offering{offeringDeliveryService} to OfferingDeliveryService {offering},
    Offering{offeringPayment} to OfferingPayment {offering},
    Offering{offeringPurchase} to OfferingPuchase {offering},
    Offering{offeringCourier} to OfferingCourier {offering}
}

paginate  Trip, Posting, Offering, OfferingDeliveryInfo, OfferingDeliveryService, OfferingPayment, OfferingPuchase, Comment, SubComment, OfferingCourier with infinite-scroll
